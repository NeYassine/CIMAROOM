{"dependencies":[{"name":"@babel/runtime/helpers/interopRequireDefault","data":{"asyncType":null,"isESMImport":false,"locs":[],"key":"kslwqCIsh6ew+I1KeA1rlVRjsAk=","exportNames":["*"]}},{"name":"expo-modules-core","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":78,"index":78}}],"key":"fU8WLIPqoAGygnPbZ/QJiQQfXEY=","exportNames":["*"]}},{"name":"./ExpoFontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":79},"end":{"line":2,"column":46,"index":125}}],"key":"7dk3JQGwGYesJt8OOG3pkBz+dtE=","exportNames":["*"]}},{"name":"./Font.types","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":126},"end":{"line":3,"column":43,"index":169}}],"key":"iwvcxaVgfIXdww6iPrKSgtcaZy8=","exportNames":["*"]}},{"name":"./FontLoader","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":170},"end":{"line":4,"column":70,"index":240}}],"key":"ubgLNxOkixzH8pVapAwap9wQ8XU=","exportNames":["*"]}},{"name":"./memory","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":241},"end":{"line":5,"column":124,"index":365}}],"key":"wlrMBDc1MVhnZOig0xhYu83J328=","exportNames":["*"]}},{"name":"./server","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":366},"end":{"line":6,"column":46,"index":412}}],"key":"QinwpQMs5c8GY+myVdgXEzx55Tw=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var _interopRequireDefault = require(_dependencyMap[0], \"@babel/runtime/helpers/interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  Object.defineProperty(exports, \"FontDisplay\", {\n    enumerable: true,\n    get: function () {\n      return _Font.FontDisplay;\n    }\n  });\n  exports.getLoadedFonts = getLoadedFonts;\n  exports.isLoaded = isLoaded;\n  exports.isLoading = isLoading;\n  exports.loadAsync = loadAsync;\n  exports.unloadAllAsync = unloadAllAsync;\n  exports.unloadAsync = unloadAsync;\n  var _expoModulesCore = require(_dependencyMap[1], \"expo-modules-core\");\n  var _ExpoFontLoader = _interopRequireDefault(require(_dependencyMap[2], \"./ExpoFontLoader\"));\n  var _Font = require(_dependencyMap[3], \"./Font.types\");\n  var _FontLoader = require(_dependencyMap[4], \"./FontLoader\");\n  var _memory = require(_dependencyMap[5], \"./memory\");\n  var _server = require(_dependencyMap[6], \"./server\");\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` has finished loading.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @return Returns `true` if the font has fully loaded.\n   */\n  function isLoaded(fontFamily) {\n    if (_expoModulesCore.Platform.OS === 'web') {\n      if (typeof _ExpoFontLoader.default.isLoaded !== 'function') {\n        throw new Error(`expected ExpoFontLoader.isLoaded to be a function, was ${typeof _ExpoFontLoader.default.isLoaded}`);\n      }\n      return (0, _memory.isLoadedInCache)(fontFamily) || _ExpoFontLoader.default.isLoaded(fontFamily);\n    }\n    return (0, _memory.isLoadedNative)(fontFamily);\n  }\n  /**\n   * Synchronously get all the fonts that have been loaded.\n   * This includes fonts that were bundled at build time using the config plugin, as well as those loaded at runtime using `loadAsync`.\n   *\n   * @returns Returns array of strings which you can use as `fontFamily` [style prop](https://reactnative.dev/docs/text#style).\n   */\n  function getLoadedFonts() {\n    return _ExpoFontLoader.default.getLoadedFonts();\n  }\n  // @needsAudit\n  /**\n   * Synchronously detect if the font for `fontFamily` is still being loaded.\n   *\n   * @param fontFamily The name used to load the `FontResource`.\n   * @returns Returns `true` if the font is still loading.\n   */\n  function isLoading(fontFamily) {\n    return fontFamily in _memory.loadPromises;\n  }\n  // @needsAudit\n  /**\n   * An efficient method for loading fonts from static or remote resources which can then be used\n   * with the platform's native text elements. In the browser, this generates a `@font-face` block in\n   * a shared style sheet for fonts. No CSS is needed to use this method.\n   *\n   * > **Note**: We recommend using the [config plugin](#configuration-in-app-config) instead whenever possible.\n   *\n   * @param fontFamilyOrFontMap String or map of values that can be used as the `fontFamily` [style prop](https://reactnative.dev/docs/text#style)\n   * with React Native `Text` elements.\n   * @param source The font asset that should be loaded into the `fontFamily` namespace.\n   *\n   * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n   * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n   */\n  function loadAsync(fontFamilyOrFontMap, source) {\n    // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n    // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n    // standard Expo SDK style guide.\n    const isServer = _expoModulesCore.Platform.OS === 'web' && true;\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (source) {\n        return Promise.reject(new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      if (isServer) {\n        names.map(name => (0, _server.registerStaticFont)(name, fontMap[name]));\n        return Promise.resolve();\n      }\n      return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n    }\n    if (isServer) {\n      (0, _server.registerStaticFont)(fontFamilyOrFontMap, source);\n      return Promise.resolve();\n    }\n    return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n  }\n  async function loadFontInNamespaceAsync(fontFamily, source) {\n    if (!source) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n    }\n    // we consult the native module to see if the font is already loaded\n    // this is slower than checking the cache but can help avoid loading the same font n times\n    if (isLoaded(fontFamily)) {\n      return;\n    }\n    if (_memory.loadPromises.hasOwnProperty(fontFamily)) {\n      return _memory.loadPromises[fontFamily];\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    const asset = (0, _FontLoader.getAssetForSource)(source);\n    _memory.loadPromises[fontFamily] = (async () => {\n      try {\n        await (0, _FontLoader.loadSingleFontAsync)(fontFamily, asset);\n        (0, _memory.markLoaded)(fontFamily);\n      } finally {\n        delete _memory.loadPromises[fontFamily];\n      }\n    })();\n    await _memory.loadPromises[fontFamily];\n  }\n  // @needsAudit\n  /**\n   * Unloads all the custom fonts. This is used for testing.\n   * @hidden\n   */\n  async function unloadAllAsync() {\n    if (!_ExpoFontLoader.default.unloadAllAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAllAsync');\n    }\n    if (Object.keys(_memory.loadPromises).length) {\n      throw new _expoModulesCore.CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(_memory.loadPromises).join(', ')}`);\n    }\n    (0, _memory.purgeCache)();\n    await _ExpoFontLoader.default.unloadAllAsync();\n  }\n  // @needsAudit\n  /**\n   * Unload custom fonts matching the `fontFamily`s and display values provided.\n   * This is used for testing.\n   *\n   * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n   * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n   * the custom font originally.\n   * @hidden\n   */\n  async function unloadAsync(fontFamilyOrFontMap, options) {\n    if (!_ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    if (typeof fontFamilyOrFontMap === 'object') {\n      if (options) {\n        throw new _expoModulesCore.CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n      }\n      const fontMap = fontFamilyOrFontMap;\n      const names = Object.keys(fontMap);\n      await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n      return;\n    }\n    return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n  }\n  async function unloadFontInNamespaceAsync(fontFamily, options) {\n    if (!isLoaded(fontFamily)) {\n      return;\n    } else {\n      (0, _memory.purgeFontFamilyFromCache)(fontFamily);\n    }\n    // Important: we want all callers that concurrently try to load the same font to await the same\n    // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n    // promise in the program, we need to create the promise synchronously without yielding the event\n    // loop from this point.\n    if (!fontFamily) {\n      throw new _expoModulesCore.CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n    }\n    if (!_ExpoFontLoader.default.unloadAsync) {\n      throw new _expoModulesCore.UnavailabilityError('expo-font', 'unloadAsync');\n    }\n    await _ExpoFontLoader.default.unloadAsync(fontFamily, options);\n  }\n});","lineCount":182,"map":[[18,2,1,0],[18,6,1,0,"_expoModulesCore"],[18,22,1,0],[18,25,1,0,"require"],[18,32,1,0],[18,33,1,0,"_dependencyMap"],[18,47,1,0],[19,2,2,0],[19,6,2,0,"_ExpoFontLoader"],[19,21,2,0],[19,24,2,0,"_interopRequireDefault"],[19,46,2,0],[19,47,2,0,"require"],[19,54,2,0],[19,55,2,0,"_dependencyMap"],[19,69,2,0],[20,2,3,0],[20,6,3,0,"_Font"],[20,11,3,0],[20,14,3,0,"require"],[20,21,3,0],[20,22,3,0,"_dependencyMap"],[20,36,3,0],[21,2,4,0],[21,6,4,0,"_FontLoader"],[21,17,4,0],[21,20,4,0,"require"],[21,27,4,0],[21,28,4,0,"_dependencyMap"],[21,42,4,0],[22,2,5,0],[22,6,5,0,"_memory"],[22,13,5,0],[22,16,5,0,"require"],[22,23,5,0],[22,24,5,0,"_dependencyMap"],[22,38,5,0],[23,2,6,0],[23,6,6,0,"_server"],[23,13,6,0],[23,16,6,0,"require"],[23,23,6,0],[23,24,6,0,"_dependencyMap"],[23,38,6,0],[24,2,7,0],[25,2,8,0],[26,0,9,0],[27,0,10,0],[28,0,11,0],[29,0,12,0],[30,0,13,0],[31,2,14,7],[31,11,14,16,"isLoaded"],[31,19,14,24,"isLoaded"],[31,20,14,25,"fontFamily"],[31,30,14,35],[31,32,14,37],[32,4,15,4],[32,8,15,8,"Platform"],[32,33,15,16],[32,34,15,17,"OS"],[32,36,15,19],[32,41,15,24],[32,46,15,29],[32,48,15,31],[33,6,16,8],[33,10,16,12],[33,17,16,19,"ExpoFontLoader"],[33,40,16,33],[33,41,16,34,"isLoaded"],[33,49,16,42],[33,54,16,47],[33,64,16,57],[33,66,16,59],[34,8,17,12],[34,14,17,18],[34,18,17,22,"Error"],[34,23,17,27],[34,24,17,28],[34,82,17,86],[34,89,17,93,"ExpoFontLoader"],[34,112,17,107],[34,113,17,108,"isLoaded"],[34,121,17,116],[34,123,17,118],[34,124,17,119],[35,6,18,8],[36,6,19,8],[36,13,19,15],[36,17,19,15,"isLoadedInCache"],[36,40,19,30],[36,42,19,31,"fontFamily"],[36,52,19,41],[36,53,19,42],[36,57,19,46,"ExpoFontLoader"],[36,80,19,60],[36,81,19,61,"isLoaded"],[36,89,19,69],[36,90,19,70,"fontFamily"],[36,100,19,80],[36,101,19,81],[37,4,20,4],[38,4,21,4],[38,11,21,11],[38,15,21,11,"isLoadedNative"],[38,37,21,25],[38,39,21,26,"fontFamily"],[38,49,21,36],[38,50,21,37],[39,2,22,0],[40,2,23,0],[41,0,24,0],[42,0,25,0],[43,0,26,0],[44,0,27,0],[45,0,28,0],[46,2,29,7],[46,11,29,16,"getLoadedFonts"],[46,25,29,30,"getLoadedFonts"],[46,26,29,30],[46,28,29,33],[47,4,30,4],[47,11,30,11,"ExpoFontLoader"],[47,34,30,25],[47,35,30,26,"getLoadedFonts"],[47,49,30,40],[47,50,30,41],[47,51,30,42],[48,2,31,0],[49,2,32,0],[50,2,33,0],[51,0,34,0],[52,0,35,0],[53,0,36,0],[54,0,37,0],[55,0,38,0],[56,2,39,7],[56,11,39,16,"isLoading"],[56,20,39,25,"isLoading"],[56,21,39,26,"fontFamily"],[56,31,39,36],[56,33,39,38],[57,4,40,4],[57,11,40,11,"fontFamily"],[57,21,40,21],[57,25,40,25,"loadPromises"],[57,45,40,37],[58,2,41,0],[59,2,42,0],[60,2,43,0],[61,0,44,0],[62,0,45,0],[63,0,46,0],[64,0,47,0],[65,0,48,0],[66,0,49,0],[67,0,50,0],[68,0,51,0],[69,0,52,0],[70,0,53,0],[71,0,54,0],[72,0,55,0],[73,0,56,0],[74,2,57,7],[74,11,57,16,"loadAsync"],[74,20,57,25,"loadAsync"],[74,21,57,26,"fontFamilyOrFontMap"],[74,40,57,45],[74,42,57,47,"source"],[74,48,57,53],[74,50,57,55],[75,4,58,4],[76,4,59,4],[77,4,60,4],[78,4,61,4],[78,10,61,10,"isServer"],[78,18,61,18],[78,21,61,21,"Platform"],[78,46,61,29],[78,47,61,30,"OS"],[78,49,61,32],[78,54,61,37],[78,59,61,42],[78,67,61,75],[79,4,62,4],[79,8,62,8],[79,15,62,15,"fontFamilyOrFontMap"],[79,34,62,34],[79,39,62,39],[79,47,62,47],[79,49,62,49],[80,6,63,8],[80,10,63,12,"source"],[80,16,63,18],[80,18,63,20],[81,8,64,12],[81,15,64,19,"Promise"],[81,22,64,26],[81,23,64,27,"reject"],[81,29,64,33],[81,30,64,34],[81,34,64,38,"CodedError"],[81,61,64,48],[81,62,64,49],[81,76,64,63],[81,78,64,65],[81,132,64,119,"source"],[81,138,64,125],[81,244,64,231],[81,245,64,232],[81,246,64,233],[82,6,65,8],[83,6,66,8],[83,12,66,14,"fontMap"],[83,19,66,21],[83,22,66,24,"fontFamilyOrFontMap"],[83,41,66,43],[84,6,67,8],[84,12,67,14,"names"],[84,17,67,19],[84,20,67,22,"Object"],[84,26,67,28],[84,27,67,29,"keys"],[84,31,67,33],[84,32,67,34,"fontMap"],[84,39,67,41],[84,40,67,42],[85,6,68,8],[85,10,68,12,"isServer"],[85,18,68,20],[85,20,68,22],[86,8,69,12,"names"],[86,13,69,17],[86,14,69,18,"map"],[86,17,69,21],[86,18,69,23,"name"],[86,22,69,27],[86,26,69,32],[86,30,69,32,"registerStaticFont"],[86,56,69,50],[86,58,69,51,"name"],[86,62,69,55],[86,64,69,57,"fontMap"],[86,71,69,64],[86,72,69,65,"name"],[86,76,69,69],[86,77,69,70],[86,78,69,71],[86,79,69,72],[87,8,70,12],[87,15,70,19,"Promise"],[87,22,70,26],[87,23,70,27,"resolve"],[87,30,70,34],[87,31,70,35],[87,32,70,36],[88,6,71,8],[89,6,72,8],[89,13,72,15,"Promise"],[89,20,72,22],[89,21,72,23,"all"],[89,24,72,26],[89,25,72,27,"names"],[89,30,72,32],[89,31,72,33,"map"],[89,34,72,36],[89,35,72,38,"name"],[89,39,72,42],[89,43,72,47,"loadFontInNamespaceAsync"],[89,67,72,71],[89,68,72,72,"name"],[89,72,72,76],[89,74,72,78,"fontMap"],[89,81,72,85],[89,82,72,86,"name"],[89,86,72,90],[89,87,72,91],[89,88,72,92],[89,89,72,93],[89,90,72,94],[89,91,72,95,"then"],[89,95,72,99],[89,96,72,100],[89,102,72,106],[89,103,72,108],[89,104,72,109],[89,105,72,110],[90,4,73,4],[91,4,74,4],[91,8,74,8,"isServer"],[91,16,74,16],[91,18,74,18],[92,6,75,8],[92,10,75,8,"registerStaticFont"],[92,36,75,26],[92,38,75,27,"fontFamilyOrFontMap"],[92,57,75,46],[92,59,75,48,"source"],[92,65,75,54],[92,66,75,55],[93,6,76,8],[93,13,76,15,"Promise"],[93,20,76,22],[93,21,76,23,"resolve"],[93,28,76,30],[93,29,76,31],[93,30,76,32],[94,4,77,4],[95,4,78,4],[95,11,78,11,"loadFontInNamespaceAsync"],[95,35,78,35],[95,36,78,36,"fontFamilyOrFontMap"],[95,55,78,55],[95,57,78,57,"source"],[95,63,78,63],[95,64,78,64],[96,2,79,0],[97,2,80,0],[97,17,80,15,"loadFontInNamespaceAsync"],[97,41,80,39,"loadFontInNamespaceAsync"],[97,42,80,40,"fontFamily"],[97,52,80,50],[97,54,80,52,"source"],[97,60,80,58],[97,62,80,60],[98,4,81,4],[98,8,81,8],[98,9,81,9,"source"],[98,15,81,15],[98,17,81,17],[99,6,82,8],[99,12,82,14],[99,16,82,18,"CodedError"],[99,43,82,28],[99,44,82,29],[99,61,82,46],[99,63,82,48],[99,112,82,97,"fontFamily"],[99,122,82,107],[99,128,82,113,"source"],[99,134,82,119],[99,204,82,189,"fontFamily"],[99,214,82,199],[99,217,82,202],[99,218,82,203],[100,4,83,4],[101,4,84,4],[102,4,85,4],[103,4,86,4],[103,8,86,8,"isLoaded"],[103,16,86,16],[103,17,86,17,"fontFamily"],[103,27,86,27],[103,28,86,28],[103,30,86,30],[104,6,87,8],[105,4,88,4],[106,4,89,4],[106,8,89,8,"loadPromises"],[106,28,89,20],[106,29,89,21,"hasOwnProperty"],[106,43,89,35],[106,44,89,36,"fontFamily"],[106,54,89,46],[106,55,89,47],[106,57,89,49],[107,6,90,8],[107,13,90,15,"loadPromises"],[107,33,90,27],[107,34,90,28,"fontFamily"],[107,44,90,38],[107,45,90,39],[108,4,91,4],[109,4,92,4],[110,4,93,4],[111,4,94,4],[112,4,95,4],[113,4,96,4],[113,10,96,10,"asset"],[113,15,96,15],[113,18,96,18],[113,22,96,18,"getAssetForSource"],[113,51,96,35],[113,53,96,36,"source"],[113,59,96,42],[113,60,96,43],[114,4,97,4,"loadPromises"],[114,24,97,16],[114,25,97,17,"fontFamily"],[114,35,97,27],[114,36,97,28],[114,39,97,31],[114,40,97,32],[114,52,97,44],[115,6,98,8],[115,10,98,12],[116,8,99,12],[116,14,99,18],[116,18,99,18,"loadSingleFontAsync"],[116,49,99,37],[116,51,99,38,"fontFamily"],[116,61,99,48],[116,63,99,50,"asset"],[116,68,99,55],[116,69,99,56],[117,8,100,12],[117,12,100,12,"markLoaded"],[117,30,100,22],[117,32,100,23,"fontFamily"],[117,42,100,33],[117,43,100,34],[118,6,101,8],[118,7,101,9],[118,16,102,16],[119,8,103,12],[119,15,103,19,"loadPromises"],[119,35,103,31],[119,36,103,32,"fontFamily"],[119,46,103,42],[119,47,103,43],[120,6,104,8],[121,4,105,4],[121,5,105,5],[121,7,105,7],[121,8,105,8],[122,4,106,4],[122,10,106,10,"loadPromises"],[122,30,106,22],[122,31,106,23,"fontFamily"],[122,41,106,33],[122,42,106,34],[123,2,107,0],[124,2,108,0],[125,2,109,0],[126,0,110,0],[127,0,111,0],[128,0,112,0],[129,2,113,7],[129,17,113,22,"unloadAllAsync"],[129,31,113,36,"unloadAllAsync"],[129,32,113,36],[129,34,113,39],[130,4,114,4],[130,8,114,8],[130,9,114,9,"ExpoFontLoader"],[130,32,114,23],[130,33,114,24,"unloadAllAsync"],[130,47,114,38],[130,49,114,40],[131,6,115,8],[131,12,115,14],[131,16,115,18,"UnavailabilityError"],[131,52,115,37],[131,53,115,38],[131,64,115,49],[131,66,115,51],[131,82,115,67],[131,83,115,68],[132,4,116,4],[133,4,117,4],[133,8,117,8,"Object"],[133,14,117,14],[133,15,117,15,"keys"],[133,19,117,19],[133,20,117,20,"loadPromises"],[133,40,117,32],[133,41,117,33],[133,42,117,34,"length"],[133,48,117,40],[133,50,117,42],[134,6,118,8],[134,12,118,14],[134,16,118,18,"CodedError"],[134,43,118,28],[134,44,118,29],[134,56,118,41],[134,58,118,43],[134,110,118,95,"Object"],[134,116,118,101],[134,117,118,102,"keys"],[134,121,118,106],[134,122,118,107,"loadPromises"],[134,142,118,119],[134,143,118,120],[134,144,118,121,"join"],[134,148,118,125],[134,149,118,126],[134,153,118,130],[134,154,118,131],[134,156,118,133],[134,157,118,134],[135,4,119,4],[136,4,120,4],[136,8,120,4,"purgeCache"],[136,26,120,14],[136,28,120,15],[136,29,120,16],[137,4,121,4],[137,10,121,10,"ExpoFontLoader"],[137,33,121,24],[137,34,121,25,"unloadAllAsync"],[137,48,121,39],[137,49,121,40],[137,50,121,41],[138,2,122,0],[139,2,123,0],[140,2,124,0],[141,0,125,0],[142,0,126,0],[143,0,127,0],[144,0,128,0],[145,0,129,0],[146,0,130,0],[147,0,131,0],[148,0,132,0],[149,2,133,7],[149,17,133,22,"unloadAsync"],[149,28,133,33,"unloadAsync"],[149,29,133,34,"fontFamilyOrFontMap"],[149,48,133,53],[149,50,133,55,"options"],[149,57,133,62],[149,59,133,64],[150,4,134,4],[150,8,134,8],[150,9,134,9,"ExpoFontLoader"],[150,32,134,23],[150,33,134,24,"unloadAsync"],[150,44,134,35],[150,46,134,37],[151,6,135,8],[151,12,135,14],[151,16,135,18,"UnavailabilityError"],[151,52,135,37],[151,53,135,38],[151,64,135,49],[151,66,135,51],[151,79,135,64],[151,80,135,65],[152,4,136,4],[153,4,137,4],[153,8,137,8],[153,15,137,15,"fontFamilyOrFontMap"],[153,34,137,34],[153,39,137,39],[153,47,137,47],[153,49,137,49],[154,6,138,8],[154,10,138,12,"options"],[154,17,138,19],[154,19,138,21],[155,8,139,12],[155,14,139,18],[155,18,139,22,"CodedError"],[155,45,139,32],[155,46,139,33],[155,60,139,47],[155,62,139,49],[155,117,139,104,"options"],[155,124,139,111],[155,232,139,219],[155,233,139,220],[156,6,140,8],[157,6,141,8],[157,12,141,14,"fontMap"],[157,19,141,21],[157,22,141,24,"fontFamilyOrFontMap"],[157,41,141,43],[158,6,142,8],[158,12,142,14,"names"],[158,17,142,19],[158,20,142,22,"Object"],[158,26,142,28],[158,27,142,29,"keys"],[158,31,142,33],[158,32,142,34,"fontMap"],[158,39,142,41],[158,40,142,42],[159,6,143,8],[159,12,143,14,"Promise"],[159,19,143,21],[159,20,143,22,"all"],[159,23,143,25],[159,24,143,26,"names"],[159,29,143,31],[159,30,143,32,"map"],[159,33,143,35],[159,34,143,37,"name"],[159,38,143,41],[159,42,143,46,"unloadFontInNamespaceAsync"],[159,68,143,72],[159,69,143,73,"name"],[159,73,143,77],[159,75,143,79,"fontMap"],[159,82,143,86],[159,83,143,87,"name"],[159,87,143,91],[159,88,143,92],[159,89,143,93],[159,90,143,94],[159,91,143,95],[160,6,144,8],[161,4,145,4],[162,4,146,4],[162,11,146,11],[162,17,146,17,"unloadFontInNamespaceAsync"],[162,43,146,43],[162,44,146,44,"fontFamilyOrFontMap"],[162,63,146,63],[162,65,146,65,"options"],[162,72,146,72],[162,73,146,73],[163,2,147,0],[164,2,148,0],[164,17,148,15,"unloadFontInNamespaceAsync"],[164,43,148,41,"unloadFontInNamespaceAsync"],[164,44,148,42,"fontFamily"],[164,54,148,52],[164,56,148,54,"options"],[164,63,148,61],[164,65,148,63],[165,4,149,4],[165,8,149,8],[165,9,149,9,"isLoaded"],[165,17,149,17],[165,18,149,18,"fontFamily"],[165,28,149,28],[165,29,149,29],[165,31,149,31],[166,6,150,8],[167,4,151,4],[167,5,151,5],[167,11,152,9],[168,6,153,8],[168,10,153,8,"purgeFontFamilyFromCache"],[168,42,153,32],[168,44,153,33,"fontFamily"],[168,54,153,43],[168,55,153,44],[169,4,154,4],[170,4,155,4],[171,4,156,4],[172,4,157,4],[173,4,158,4],[174,4,159,4],[174,8,159,8],[174,9,159,9,"fontFamily"],[174,19,159,19],[174,21,159,21],[175,6,160,8],[175,12,160,14],[175,16,160,18,"CodedError"],[175,43,160,28],[175,44,160,29],[175,61,160,46],[175,63,160,48],[175,92,160,77],[175,93,160,78],[176,4,161,4],[177,4,162,4],[177,8,162,8],[177,9,162,9,"ExpoFontLoader"],[177,32,162,23],[177,33,162,24,"unloadAsync"],[177,44,162,35],[177,46,162,37],[178,6,163,8],[178,12,163,14],[178,16,163,18,"UnavailabilityError"],[178,52,163,37],[178,53,163,38],[178,64,163,49],[178,66,163,51],[178,79,163,64],[178,80,163,65],[179,4,164,4],[180,4,165,4],[180,10,165,10,"ExpoFontLoader"],[180,33,165,24],[180,34,165,25,"unloadAsync"],[180,45,165,36],[180,46,165,37,"fontFamily"],[180,56,165,47],[180,58,165,49,"options"],[180,65,165,56],[180,66,165,57],[181,2,166,0],[182,0,166,1],[182,3]],"functionMap":{"names":["<global>","isLoaded","getLoadedFonts","isLoading","loadAsync","names.map$argument_0","Promise.all.then$argument_0","loadFontInNamespaceAsync","<anonymous>","unloadAllAsync","unloadAsync","unloadFontInNamespaceAsync"],"mappings":"AAA;OCa;CDQ;OEO;CFE;OGQ;CHE;OIgB;sBCY,iDD;qCCG,uDD,QE,SF;CJO;AOC;gCCiB;KDQ;CPE;OSM;CTS;OUW;oCLU,yDK;CVI;AWC;CXkB"}},"type":"js/module"}]}